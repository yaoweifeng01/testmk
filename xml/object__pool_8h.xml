<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="object__pool_8h" kind="file">
    <compoundname>object_pool.h</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">cstring</includes>
    <includes local="no">iostream</includes>
    <includes local="no">memory</includes>
    <includes local="no">new</includes>
    <includes local="no">utility</includes>
    <includes refid="for__each_8h" local="yes">cyber/base/for_each.h</includes>
    <includes refid="base_2macros_8h" local="yes">cyber/base/macros.h</includes>
    <incdepgraph>
      <node id="454">
        <label>base/object_pool.h</label>
        <link refid="object_pool.h"/>
        <childnode refid="455" relation="include">
        </childnode>
        <childnode refid="456" relation="include">
        </childnode>
        <childnode refid="457" relation="include">
        </childnode>
        <childnode refid="458" relation="include">
        </childnode>
        <childnode refid="459" relation="include">
        </childnode>
        <childnode refid="460" relation="include">
        </childnode>
        <childnode refid="461" relation="include">
        </childnode>
        <childnode refid="462" relation="include">
        </childnode>
        <childnode refid="464" relation="include">
        </childnode>
      </node>
      <node id="460">
        <label>new</label>
      </node>
      <node id="461">
        <label>utility</label>
      </node>
      <node id="456">
        <label>cstdlib</label>
      </node>
      <node id="458">
        <label>iostream</label>
      </node>
      <node id="462">
        <label>cyber/base/for_each.h</label>
        <link refid="for__each_8h"/>
        <childnode refid="463" relation="include">
        </childnode>
        <childnode refid="464" relation="include">
        </childnode>
      </node>
      <node id="463">
        <label>type_traits</label>
      </node>
      <node id="455">
        <label>algorithm</label>
      </node>
      <node id="457">
        <label>cstring</label>
      </node>
      <node id="464">
        <label>cyber/base/macros.h</label>
        <link refid="base_2macros_8h"/>
        <childnode refid="456" relation="include">
        </childnode>
        <childnode refid="460" relation="include">
        </childnode>
      </node>
      <node id="459">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="classapollo_1_1cyber_1_1base_1_1ObjectPool" prot="public">apollo::cyber::base::ObjectPool</innerclass>
    <innerclass refid="structapollo_1_1cyber_1_1base_1_1ObjectPool_1_1Node" prot="private">apollo::cyber::base::ObjectPool::Node</innerclass>
    <innernamespace refid="namespaceapollo">apollo</innernamespace>
    <innernamespace refid="namespaceapollo_1_1cyber">apollo::cyber</innernamespace>
    <innernamespace refid="namespaceapollo_1_1cyber_1_1base">apollo::cyber::base</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2018<sp/>The<sp/>Apollo<sp/>Authors.<sp/>All<sp/>Rights<sp/>Reserved.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CYBER_BASE_OBJECT_POOL_H_</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CYBER_BASE_OBJECT_POOL_H_</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;new&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="for__each_8h" kindref="compound">cyber/base/for_each.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="base_2macros_8h" kindref="compound">cyber/base/macros.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">apollo<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">cyber<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">base<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="36" refid="classapollo_1_1cyber_1_1base_1_1ObjectPool" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool" kindref="compound">ObjectPool</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::enable_shared_from_this&lt;ObjectPool&lt;T&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="38" refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1af46b770564c8080f800088ea25d9a830" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1af46b770564c8080f800088ea25d9a830" kindref="member">InitFunc</ref><sp/>=<sp/>std::function&lt;void(T<sp/>*)&gt;;</highlight></codeline>
<codeline lineno="39" refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a40cf6e156676c64e8803be8ed930c43a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a40cf6e156676c64e8803be8ed930c43a" kindref="member">ObjectPoolPtr</ref><sp/>=<sp/>std::shared_ptr&lt;ObjectPool&lt;T&gt;&gt;;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a8b01de4b6ca2c440f92828bcd98ca516" kindref="member">ObjectPool</ref>(uint32_t<sp/>num_objects,<sp/>Args<sp/>&amp;&amp;...<sp/>args);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a8b01de4b6ca2c440f92828bcd98ca516" kindref="member">ObjectPool</ref>(uint32_t<sp/>num_objects,<sp/><ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1af46b770564c8080f800088ea25d9a830" kindref="member">InitFunc</ref><sp/>f,<sp/>Args<sp/>&amp;&amp;...<sp/>args);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a3c7a5f92aecd8e99967b55036ca49fb5" kindref="member">~ObjectPool</ref>();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;T&gt;<sp/><ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1aff04cf85d0e04a74b5286b023d1613e2" kindref="member">GetObject</ref>();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="52" refid="structapollo_1_1cyber_1_1base_1_1ObjectPool_1_1Node" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structapollo_1_1cyber_1_1base_1_1ObjectPool_1_1Node" kindref="compound">Node</ref><sp/>{</highlight></codeline>
<codeline lineno="53" refid="structapollo_1_1cyber_1_1base_1_1ObjectPool_1_1Node_1a991d230da210daa4ee3ce7bada58a4e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="structapollo_1_1cyber_1_1base_1_1ObjectPool_1_1Node_1a991d230da210daa4ee3ce7bada58a4e8" kindref="member">object</ref>;</highlight></codeline>
<codeline lineno="54" refid="structapollo_1_1cyber_1_1base_1_1ObjectPool_1_1Node_1a989677551881b0ef8130081dd737423a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structapollo_1_1cyber_1_1base_1_1ObjectPool_1_1Node" kindref="compound">Node</ref><sp/>*<ref refid="structapollo_1_1cyber_1_1base_1_1ObjectPool_1_1Node_1a989677551881b0ef8130081dd737423a" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a8b01de4b6ca2c440f92828bcd98ca516" kindref="member">ObjectPool</ref>(<ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool" kindref="compound">ObjectPool</ref><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool" kindref="compound">ObjectPool</ref><sp/>&amp;<ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1acbac34af271062daba15ea32f0f74305" kindref="member">operator=</ref>(<ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool" kindref="compound">ObjectPool</ref><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1aafd45e0efa58c46403e2a4ae066817a3" kindref="member">ReleaseObject</ref>(T<sp/>*);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a83d8b9c2acc9e54022d86a6758087ad4" refkind="member"><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a83d8b9c2acc9e54022d86a6758087ad4" kindref="member">num_objects_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="62" refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a611e7b13c400c42846d870fcc668ddfb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a611e7b13c400c42846d870fcc668ddfb" kindref="member">object_arena_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63" refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a2b393acf60e1b2ec7a75006af09dda23" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structapollo_1_1cyber_1_1base_1_1ObjectPool_1_1Node" kindref="compound">Node</ref><sp/>*<ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a2b393acf60e1b2ec7a75006af09dda23" kindref="member">free_head_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">};</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="68" refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a8b01de4b6ca2c440f92828bcd98ca516" refkind="member"><highlight class="normal"><ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a8b01de4b6ca2c440f92828bcd98ca516" kindref="member">ObjectPool&lt;T&gt;::ObjectPool</ref>(uint32_t<sp/>num_objects,<sp/>Args<sp/>&amp;&amp;...<sp/>args)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>num_objects_(num_objects)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structapollo_1_1cyber_1_1base_1_1ObjectPool_1_1Node" kindref="compound">Node</ref>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a611e7b13c400c42846d870fcc668ddfb" kindref="member">object_arena_</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::calloc(<ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a83d8b9c2acc9e54022d86a6758087ad4" kindref="member">num_objects_</ref>,<sp/>size));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a611e7b13c400c42846d870fcc668ddfb" kindref="member">object_arena_</ref><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::bad_alloc();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><ref refid="for__each_8h_1aa34cc41b14223834b057cbfd0f2a67db" kindref="member">FOR_EACH</ref>(i,<sp/>0,<sp/><ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a83d8b9c2acc9e54022d86a6758087ad4" kindref="member">num_objects_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>*obj<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(<ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a611e7b13c400c42846d870fcc668ddfb" kindref="member">object_arena_</ref><sp/>+<sp/>i<sp/>*<sp/>size)<sp/>T(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="structapollo_1_1cyber_1_1base_1_1ObjectPool_1_1Node" kindref="compound">Node</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(obj)-&gt;next<sp/>=<sp/><ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a2b393acf60e1b2ec7a75006af09dda23" kindref="member">free_head_</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a2b393acf60e1b2ec7a75006af09dda23" kindref="member">free_head_</ref><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="structapollo_1_1cyber_1_1base_1_1ObjectPool_1_1Node" kindref="compound">Node</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(obj);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="85" refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1ac3f237b9bc56ef248cb3b5e4a957608e" refkind="member"><highlight class="normal"><ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a8b01de4b6ca2c440f92828bcd98ca516" kindref="member">ObjectPool&lt;T&gt;::ObjectPool</ref>(uint32_t<sp/>num_objects,<sp/><ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1af46b770564c8080f800088ea25d9a830" kindref="member">InitFunc</ref><sp/>f,<sp/>Args<sp/>&amp;&amp;...<sp/>args)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>num_objects_(num_objects)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structapollo_1_1cyber_1_1base_1_1ObjectPool_1_1Node" kindref="compound">Node</ref>);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a611e7b13c400c42846d870fcc668ddfb" kindref="member">object_arena_</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::calloc(<ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a83d8b9c2acc9e54022d86a6758087ad4" kindref="member">num_objects_</ref>,<sp/>size));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a611e7b13c400c42846d870fcc668ddfb" kindref="member">object_arena_</ref><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::bad_alloc();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><ref refid="for__each_8h_1aa34cc41b14223834b057cbfd0f2a67db" kindref="member">FOR_EACH</ref>(i,<sp/>0,<sp/><ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a83d8b9c2acc9e54022d86a6758087ad4" kindref="member">num_objects_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>*obj<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(<ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a611e7b13c400c42846d870fcc668ddfb" kindref="member">object_arena_</ref><sp/>+<sp/>i<sp/>*<sp/>size)<sp/>T(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>f(obj);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="structapollo_1_1cyber_1_1base_1_1ObjectPool_1_1Node" kindref="compound">Node</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(obj)-&gt;next<sp/>=<sp/><ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a2b393acf60e1b2ec7a75006af09dda23" kindref="member">free_head_</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a2b393acf60e1b2ec7a75006af09dda23" kindref="member">free_head_</ref><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="structapollo_1_1cyber_1_1base_1_1ObjectPool_1_1Node" kindref="compound">Node</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(obj);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="102" refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a3c7a5f92aecd8e99967b55036ca49fb5" refkind="member"><highlight class="normal"><ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1a3c7a5f92aecd8e99967b55036ca49fb5" kindref="member">ObjectPool&lt;T&gt;::~ObjectPool</ref>()<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(object_arena_<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structapollo_1_1cyber_1_1base_1_1ObjectPool_1_1Node" kindref="compound">Node</ref>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="for__each_8h_1aa34cc41b14223834b057cbfd0f2a67db" kindref="member">FOR_EACH</ref>(i,<sp/>0,<sp/>num_objects_)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="structapollo_1_1cyber_1_1base_1_1ObjectPool_1_1Node" kindref="compound">Node</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(object_arena_<sp/>+<sp/>i<sp/>*<sp/>size)-&gt;</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">.~T();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>std::free(object_arena_);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="113" refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1aafd45e0efa58c46403e2a4ae066817a3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1aafd45e0efa58c46403e2a4ae066817a3" kindref="member">ObjectPool&lt;T&gt;::ReleaseObject</ref>(T<sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="base_2macros_8h_1ac6c45889010c1bd68631771b64f18101" kindref="member">unlikely</ref>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="structapollo_1_1cyber_1_1base_1_1ObjectPool_1_1Node" kindref="compound">Node</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(object)-&gt;next<sp/>=<sp/>free_head_;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>free_head_<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="structapollo_1_1cyber_1_1base_1_1ObjectPool_1_1Node" kindref="compound">Node</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(object);</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="121" refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1aff04cf85d0e04a74b5286b023d1613e2" refkind="member"><highlight class="normal">std::shared_ptr&lt;T&gt;<sp/><ref refid="classapollo_1_1cyber_1_1base_1_1ObjectPool_1aff04cf85d0e04a74b5286b023d1613e2" kindref="member">ObjectPool&lt;T&gt;::GetObject</ref>()<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="base_2macros_8h_1ac6c45889010c1bd68631771b64f18101" kindref="member">unlikely</ref>(free_head_<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/>this-&gt;shared_from_this();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>obj<sp/>=</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;T&gt;(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">T<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(free_head_),</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal">](T<sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;ReleaseObject(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);<sp/>});</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>free_head_<sp/>=<sp/>free_head_-&gt;next;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>cyber</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>apollo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>CYBER_BASE_OBJECT_POOL_H_</highlight></codeline>
    </programlisting>
    <location file="/home/work/apollo-fork/apollo/cyber/base/object_pool.h"/>
  </compounddef>
</doxygen>
