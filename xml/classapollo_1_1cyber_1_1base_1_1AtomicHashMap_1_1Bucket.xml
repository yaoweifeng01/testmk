<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classapollo_1_1cyber_1_1base_1_1AtomicHashMap_1_1Bucket" kind="class" prot="private">
    <compoundname>apollo::cyber::base::AtomicHashMap::Bucket</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classapollo_1_1cyber_1_1base_1_1AtomicHashMap_1_1Bucket_1a4564f028e20a090f229c18968c4636b5" prot="public" static="no" mutable="no">
        <type><ref refid="structapollo_1_1cyber_1_1base_1_1AtomicHashMap_1_1Entry" kindref="compound">Entry</ref> *</type>
        <definition>Entry* apollo::cyber::base::AtomicHashMap&lt; K, V, TableSize, type &gt;::Bucket::head_</definition>
        <argsstring></argsstring>
        <name>head_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/base/atomic_hash_map.h" line="247" column="1" bodyfile="/home/work/apollo-fork/apollo/cyber/base/atomic_hash_map.h" bodystart="247" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classapollo_1_1cyber_1_1base_1_1AtomicHashMap_1_1Bucket_1a6d7968e613f57c1f45c687e937002def" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>apollo::cyber::base::AtomicHashMap&lt; K, V, TableSize, type &gt;::Bucket::Bucket</definition>
        <argsstring>()</argsstring>
        <name>Bucket</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/base/atomic_hash_map.h" line="102" column="1" bodyfile="/home/work/apollo-fork/apollo/cyber/base/atomic_hash_map.h" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1base_1_1AtomicHashMap_1_1Bucket_1ab8588807dff84dee88f5a7ee18724d4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>apollo::cyber::base::AtomicHashMap&lt; K, V, TableSize, type &gt;::Bucket::~Bucket</definition>
        <argsstring>()</argsstring>
        <name>~Bucket</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/base/atomic_hash_map.h" line="103" column="1" bodyfile="/home/work/apollo-fork/apollo/cyber/base/atomic_hash_map.h" bodystart="103" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1base_1_1AtomicHashMap_1_1Bucket_1a2d8891754500ca4192856a7f7614829a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool apollo::cyber::base::AtomicHashMap&lt; K, V, TableSize, type &gt;::Bucket::Has</definition>
        <argsstring>(K key)</argsstring>
        <name>Has</name>
        <param>
          <type>K</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/base/atomic_hash_map.h" line="112" column="1" bodyfile="/home/work/apollo-fork/apollo/cyber/base/atomic_hash_map.h" bodystart="112" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1base_1_1AtomicHashMap_1_1Bucket_1ac221662e95bf2d7c5589cab2766cd788" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool apollo::cyber::base::AtomicHashMap&lt; K, V, TableSize, type &gt;::Bucket::Find</definition>
        <argsstring>(K key, Entry **prev_ptr, Entry **target_ptr)</argsstring>
        <name>Find</name>
        <param>
          <type>K</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="structapollo_1_1cyber_1_1base_1_1AtomicHashMap_1_1Entry" kindref="compound">Entry</ref> **</type>
          <declname>prev_ptr</declname>
        </param>
        <param>
          <type><ref refid="structapollo_1_1cyber_1_1base_1_1AtomicHashMap_1_1Entry" kindref="compound">Entry</ref> **</type>
          <declname>target_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/base/atomic_hash_map.h" line="125" column="1" bodyfile="/home/work/apollo-fork/apollo/cyber/base/atomic_hash_map.h" bodystart="125" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1base_1_1AtomicHashMap_1_1Bucket_1aa3cba2cbce1ff70d05aeee20b85ef496" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void apollo::cyber::base::AtomicHashMap&lt; K, V, TableSize, type &gt;::Bucket::Insert</definition>
        <argsstring>(K key, const V &amp;value)</argsstring>
        <name>Insert</name>
        <param>
          <type>K</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/base/atomic_hash_map.h" line="147" column="1" bodyfile="/home/work/apollo-fork/apollo/cyber/base/atomic_hash_map.h" bodystart="147" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1base_1_1AtomicHashMap_1_1Bucket_1a54408f179b728a7e7928443d57a034dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void apollo::cyber::base::AtomicHashMap&lt; K, V, TableSize, type &gt;::Bucket::Insert</definition>
        <argsstring>(K key, V &amp;&amp;value)</argsstring>
        <name>Insert</name>
        <param>
          <type>K</type>
          <declname>key</declname>
        </param>
        <param>
          <type>V &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/base/atomic_hash_map.h" line="177" column="1" bodyfile="/home/work/apollo-fork/apollo/cyber/base/atomic_hash_map.h" bodystart="177" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1base_1_1AtomicHashMap_1_1Bucket_1ae363c6757f59ff0031776577e4bb7c03" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void apollo::cyber::base::AtomicHashMap&lt; K, V, TableSize, type &gt;::Bucket::Insert</definition>
        <argsstring>(K key)</argsstring>
        <name>Insert</name>
        <param>
          <type>K</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/base/atomic_hash_map.h" line="207" column="1" bodyfile="/home/work/apollo-fork/apollo/cyber/base/atomic_hash_map.h" bodystart="207" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1base_1_1AtomicHashMap_1_1Bucket_1a0de1875c51ca5d8692e8055f5da7d54c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool apollo::cyber::base::AtomicHashMap&lt; K, V, TableSize, type &gt;::Bucket::Get</definition>
        <argsstring>(K key, V **value)</argsstring>
        <name>Get</name>
        <param>
          <type>K</type>
          <declname>key</declname>
        </param>
        <param>
          <type>V **</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/base/atomic_hash_map.h" line="237" column="1" bodyfile="/home/work/apollo-fork/apollo/cyber/base/atomic_hash_map.h" bodystart="237" bodyend="245"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="70">
        <label>apollo::cyber::base::AtomicHashMap&lt; K, V, TableSize, std::enable_if&lt; std::is_integral&lt; K &gt;::value &amp;&amp;(TableSize &amp;(TableSize-1))==0, int &gt;::type &gt;::Entry</label>
        <link refid="structapollo_1_1cyber_1_1base_1_1AtomicHashMap_1_1Entry"/>
      </node>
      <node id="69">
        <label>apollo::cyber::base::AtomicHashMap&lt; K, V, TableSize, std::enable_if&lt; std::is_integral&lt; K &gt;::value &amp;&amp;(TableSize &amp;(TableSize-1))==0, int &gt;::type &gt;::Bucket</label>
        <link refid="classapollo_1_1cyber_1_1base_1_1AtomicHashMap_1_1Bucket"/>
        <childnode refid="70" relation="usage">
          <edgelabel>head_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/work/apollo-fork/apollo/cyber/base/atomic_hash_map.h" line="100" column="1" bodyfile="/home/work/apollo-fork/apollo/cyber/base/atomic_hash_map.h" bodystart="100" bodyend="248"/>
    <listofallmembers>
      <member refid="classapollo_1_1cyber_1_1base_1_1AtomicHashMap_1_1Bucket_1a6d7968e613f57c1f45c687e937002def" prot="public" virt="non-virtual"><scope>apollo::cyber::base::AtomicHashMap::Bucket</scope><name>Bucket</name></member>
      <member refid="classapollo_1_1cyber_1_1base_1_1AtomicHashMap_1_1Bucket_1ac221662e95bf2d7c5589cab2766cd788" prot="public" virt="non-virtual"><scope>apollo::cyber::base::AtomicHashMap::Bucket</scope><name>Find</name></member>
      <member refid="classapollo_1_1cyber_1_1base_1_1AtomicHashMap_1_1Bucket_1a0de1875c51ca5d8692e8055f5da7d54c" prot="public" virt="non-virtual"><scope>apollo::cyber::base::AtomicHashMap::Bucket</scope><name>Get</name></member>
      <member refid="classapollo_1_1cyber_1_1base_1_1AtomicHashMap_1_1Bucket_1a2d8891754500ca4192856a7f7614829a" prot="public" virt="non-virtual"><scope>apollo::cyber::base::AtomicHashMap::Bucket</scope><name>Has</name></member>
      <member refid="classapollo_1_1cyber_1_1base_1_1AtomicHashMap_1_1Bucket_1a4564f028e20a090f229c18968c4636b5" prot="public" virt="non-virtual"><scope>apollo::cyber::base::AtomicHashMap::Bucket</scope><name>head_</name></member>
      <member refid="classapollo_1_1cyber_1_1base_1_1AtomicHashMap_1_1Bucket_1aa3cba2cbce1ff70d05aeee20b85ef496" prot="public" virt="non-virtual"><scope>apollo::cyber::base::AtomicHashMap::Bucket</scope><name>Insert</name></member>
      <member refid="classapollo_1_1cyber_1_1base_1_1AtomicHashMap_1_1Bucket_1a54408f179b728a7e7928443d57a034dc" prot="public" virt="non-virtual"><scope>apollo::cyber::base::AtomicHashMap::Bucket</scope><name>Insert</name></member>
      <member refid="classapollo_1_1cyber_1_1base_1_1AtomicHashMap_1_1Bucket_1ae363c6757f59ff0031776577e4bb7c03" prot="public" virt="non-virtual"><scope>apollo::cyber::base::AtomicHashMap::Bucket</scope><name>Insert</name></member>
      <member refid="classapollo_1_1cyber_1_1base_1_1AtomicHashMap_1_1Bucket_1ab8588807dff84dee88f5a7ee18724d4c" prot="public" virt="non-virtual"><scope>apollo::cyber::base::AtomicHashMap::Bucket</scope><name>~Bucket</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
