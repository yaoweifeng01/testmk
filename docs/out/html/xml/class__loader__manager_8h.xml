<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="class__loader__manager_8h" kind="file">
    <compoundname>class_loader_manager.h</compoundname>
    <includes local="no">functional</includes>
    <includes local="no">map</includes>
    <includes local="no">memory</includes>
    <includes local="no">mutex</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes refid="class__loader_8h" local="yes">cyber/class_loader/class_loader.h</includes>
    <includedby refid="module__controller_8h" local="yes">mainboard/module_controller.h</includedby>
    <incdepgraph>
      <node id="1369">
        <label>cyber/class_loader/utility/class_loader_utility.h</label>
        <link refid="class__loader__utility_8h"/>
        <childnode refid="1370" relation="include">
        </childnode>
        <childnode refid="1371" relation="include">
        </childnode>
        <childnode refid="1372" relation="include">
        </childnode>
        <childnode refid="1361" relation="include">
        </childnode>
        <childnode refid="1362" relation="include">
        </childnode>
        <childnode refid="1363" relation="include">
        </childnode>
        <childnode refid="1364" relation="include">
        </childnode>
        <childnode refid="1373" relation="include">
        </childnode>
        <childnode refid="1374" relation="include">
        </childnode>
        <childnode refid="1365" relation="include">
        </childnode>
        <childnode refid="1375" relation="include">
        </childnode>
        <childnode refid="1376" relation="include">
        </childnode>
      </node>
      <node id="1366">
        <label>cyber/class_loader/class_loader.h</label>
        <link refid="class__loader_8h"/>
        <childnode refid="1367" relation="include">
        </childnode>
        <childnode refid="1360" relation="include">
        </childnode>
        <childnode refid="1362" relation="include">
        </childnode>
        <childnode refid="1363" relation="include">
        </childnode>
        <childnode refid="1364" relation="include">
        </childnode>
        <childnode refid="1365" relation="include">
        </childnode>
        <childnode refid="1368" relation="include">
        </childnode>
      </node>
      <node id="1377">
        <label>stdarg.h</label>
      </node>
      <node id="1360">
        <label>functional</label>
      </node>
      <node id="1375">
        <label>cyber/class_loader/utility/class_factory.h</label>
        <link refid="class__factory_8h"/>
        <childnode refid="1364" relation="include">
        </childnode>
        <childnode refid="1373" relation="include">
        </childnode>
        <childnode refid="1365" relation="include">
        </childnode>
      </node>
      <node id="1378">
        <label>cyber/binary.h</label>
        <link refid="binary_8h"/>
        <childnode refid="1364" relation="include">
        </childnode>
      </node>
      <node id="1379">
        <label>glog/logging.h</label>
      </node>
      <node id="1371">
        <label>cassert</label>
      </node>
      <node id="1370">
        <label>Poco/SharedLibrary.h</label>
      </node>
      <node id="1364">
        <label>string</label>
      </node>
      <node id="1361">
        <label>map</label>
      </node>
      <node id="1373">
        <label>typeinfo</label>
      </node>
      <node id="1372">
        <label>cstdio</label>
      </node>
      <node id="1365">
        <label>vector</label>
      </node>
      <node id="1376">
        <label>cyber/common/log.h</label>
        <link refid="log_8h"/>
        <childnode refid="1377" relation="include">
        </childnode>
        <childnode refid="1378" relation="include">
        </childnode>
        <childnode refid="1379" relation="include">
        </childnode>
        <childnode refid="1380" relation="include">
        </childnode>
      </node>
      <node id="1374">
        <label>utility</label>
      </node>
      <node id="1363">
        <label>mutex</label>
      </node>
      <node id="1380">
        <label>glog/raw_logging.h</label>
      </node>
      <node id="1359">
        <label>class_loader/class_loader_manager.h</label>
        <link refid="class_loader_manager.h"/>
        <childnode refid="1360" relation="include">
        </childnode>
        <childnode refid="1361" relation="include">
        </childnode>
        <childnode refid="1362" relation="include">
        </childnode>
        <childnode refid="1363" relation="include">
        </childnode>
        <childnode refid="1364" relation="include">
        </childnode>
        <childnode refid="1365" relation="include">
        </childnode>
        <childnode refid="1366" relation="include">
        </childnode>
      </node>
      <node id="1368">
        <label>cyber/class_loader/class_loader_register_macro.h</label>
        <link refid="class__loader__register__macro_8h"/>
        <childnode refid="1369" relation="include">
        </childnode>
      </node>
      <node id="1367">
        <label>algorithm</label>
      </node>
      <node id="1362">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1382">
        <label>mainboard/module_controller.h</label>
        <link refid="module__controller_8h"/>
      </node>
      <node id="1381">
        <label>class_loader/class_loader_manager.h</label>
        <link refid="class_loader_manager.h"/>
        <childnode refid="1382" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager" prot="public">apollo::cyber::class_loader::ClassLoaderManager</innerclass>
    <innernamespace refid="namespaceapollo">apollo</innernamespace>
    <innernamespace refid="namespaceapollo_1_1cyber">apollo::cyber</innernamespace>
    <innernamespace refid="namespaceapollo_1_1cyber_1_1class__loader">apollo::cyber::class_loader</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2018<sp/>The<sp/>Apollo<sp/>Authors.<sp/>All<sp/>Rights<sp/>Reserved.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CYBER_CLASS_LOADER_CLASS_LOADER_MANAGER_H_</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CYBER_CLASS_LOADER_CLASS_LOADER_MANAGER_H_</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mutex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="class__loader_8h" kindref="compound">cyber/class_loader/class_loader.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">apollo<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">cyber<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">class_loader<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager" kindref="compound">ClassLoaderManager</ref><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><ref refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager_1ae67511bbe6bee61a082c339a53532ca8" kindref="member">ClassLoaderManager</ref>();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager_1aea360adf2529cb95b9590b7c1565a3e9" kindref="member">~ClassLoaderManager</ref>();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager_1a9953c5cfabd0852891dcb6699d8e3dd1" kindref="member">LoadLibrary</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>library_path);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager_1a73f7454c0410084137a927ad49b75104" kindref="member">UnloadAllLibrary</ref>();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager_1a62b76f761a0e500f93f075387300eccb" kindref="member">IsLibraryValid</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>library_path);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Base&gt;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Base&gt;<sp/><ref refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager_1a9679e70f73c8215e99fb1ecc7fa10043" kindref="member">CreateClassObj</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>class_name);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Base&gt;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Base&gt;<sp/><ref refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager_1a9679e70f73c8215e99fb1ecc7fa10043" kindref="member">CreateClassObj</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>class_name,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>library_path);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Base&gt;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager_1a4bd67245e45cf40d99681139fb48d04f" kindref="member">IsClassValid</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>class_name);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Base&gt;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager_1ab75b7537616bf990a4b0008fac17bb69" kindref="member">GetValidClassNames</ref>();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><ref refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoader" kindref="compound">ClassLoader</ref>*<sp/><ref refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager_1a3d06e6d3f449f7430061b22f61a01f9a" kindref="member">GetClassLoaderByLibPath</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>library_path);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>std::vector&lt;ClassLoader*&gt;<sp/><ref refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager_1a5bed06b0e19310694bd5016868c72fe3" kindref="member">GetAllValidClassLoaders</ref>();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager_1a82d6543d465a5fd2e19d46a1b9842a59" kindref="member">GetAllValidLibPath</ref>();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager_1a6cd6ba7d38e395d61353058d7eebc26d" kindref="member">UnloadLibrary</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>library_path);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="58" refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager_1a994b015a75ed982747df24c95fbae762" refkind="member"><highlight class="normal"><sp/><sp/>std::mutex<sp/><ref refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager_1a994b015a75ed982747df24c95fbae762" kindref="member">libpath_loader_map_mutex_</ref>;</highlight></codeline>
<codeline lineno="59" refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager_1a22bbb1ede2aa1ebe5e80650df9bdba7f" refkind="member"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>ClassLoader*&gt;<sp/><ref refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager_1a22bbb1ede2aa1ebe5e80650df9bdba7f" kindref="member">libpath_loader_map_</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">};</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Base&gt;</highlight></codeline>
<codeline lineno="63" refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager_1a9679e70f73c8215e99fb1ecc7fa10043" refkind="member"><highlight class="normal">std::shared_ptr&lt;Base&gt;<sp/><ref refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager_1a9679e70f73c8215e99fb1ecc7fa10043" kindref="member">ClassLoaderManager::CreateClassObj</ref>(</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>class_name)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>std::vector&lt;ClassLoader*&gt;<sp/>class_loaders<sp/>=<sp/><ref refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager_1a5bed06b0e19310694bd5016868c72fe3" kindref="member">GetAllValidClassLoaders</ref>();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>class_loader<sp/>:<sp/>class_loaders)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(class_loader-&gt;IsClassValid&lt;Base&gt;(class_name))<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(class_loader-&gt;CreateClassObj&lt;Base&gt;(class_name));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><ref refid="log_8h_1a6f0289102fe6b16c585ca7d18eae701e" kindref="member">AERROR</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>class<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>class_name;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Base&gt;();</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Base&gt;</highlight></codeline>
<codeline lineno="76" refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager_1a3f52ab9d057116be16cd2dc92efa48f5" refkind="member"><highlight class="normal">std::shared_ptr&lt;Base&gt;<sp/><ref refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager_1a9679e70f73c8215e99fb1ecc7fa10043" kindref="member">ClassLoaderManager::CreateClassObj</ref>(</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>class_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>library_path)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><ref refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoader" kindref="compound">ClassLoader</ref>*<sp/>loader<sp/>=<sp/><ref refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager_1a3d06e6d3f449f7430061b22f61a01f9a" kindref="member">GetClassLoaderByLibPath</ref>(library_path);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(loader)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(loader-&gt;<ref refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoader_1ad869f2d0f2933e13b2e7765785287e41" kindref="member">CreateClassObj</ref>&lt;Base&gt;(class_name));</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="log_8h_1a6f0289102fe6b16c585ca7d18eae701e" kindref="member">AERROR</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>classobj,<sp/>there<sp/>is<sp/>no<sp/>ClassLoader<sp/>in:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>class_name;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Base&gt;();</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Base&gt;</highlight></codeline>
<codeline lineno="89" refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager_1a4bd67245e45cf40d99681139fb48d04f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager_1a4bd67245e45cf40d99681139fb48d04f" kindref="member">ClassLoaderManager::IsClassValid</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>class_name)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>valid_classes<sp/>=<sp/>GetValidClassNames&lt;Base&gt;();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(valid_classes.end()<sp/>!=</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::find(valid_classes.begin(),<sp/>valid_classes.end(),<sp/>class_name));</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Base&gt;</highlight></codeline>
<codeline lineno="96" refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager_1ab75b7537616bf990a4b0008fac17bb69" refkind="member"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager_1ab75b7537616bf990a4b0008fac17bb69" kindref="member">ClassLoaderManager::GetValidClassNames</ref>()<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>valid_classes;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>class_loader<sp/>:<sp/><ref refid="classapollo_1_1cyber_1_1class__loader_1_1ClassLoaderManager_1a5bed06b0e19310694bd5016868c72fe3" kindref="member">GetAllValidClassLoaders</ref>())<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>class_loaders<sp/>=</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_loader-&gt;GetValidClassNames&lt;Base&gt;();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>valid_classes.insert(valid_classes.end(),<sp/>class_loaders.begin(),</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_loaders.end());</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>valid_classes;</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>class_loader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>cyber</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>apollo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>CYBER_CLASS_LOADER_CLASS_LOADER_MANAGER_H_</highlight></codeline>
    </programlisting>
    <location file="/home/work/apollo-fork/apollo/cyber/class_loader/class_loader_manager.h"/>
  </compounddef>
</doxygen>
