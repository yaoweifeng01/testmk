<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="namespaceapollo_1_1cyber_1_1common" kind="namespace">
    <compoundname>apollo::cyber::common</compoundname>
    <innerclass refid="classapollo_1_1cyber_1_1common_1_1GlobalData" prot="public">apollo::cyber::common::GlobalData</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceapollo_1_1cyber_1_1common_1a48c0d45777e43c24f3d4f9e3f083e913" prot="public" static="yes" mutable="no">
        <type>const std::vector&lt; std::pair&lt; int32_t, int32_t &gt; &gt;</type>
        <definition>const std::vector&lt;std::pair&lt;int32_t, int32_t&gt; &gt; apollo::cyber::common::LEAP_SECONDS</definition>
        <argsstring></argsstring>
        <name>LEAP_SECONDS</name>
        <initializer>= {
    
    
    {1483228800, 18},  
    {1435708800, 17},  
    {1341100800, 16},  
    {1230768000, 15},  
    {1136073600, 14},  
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/time_conversion.h" line="47" column="1" bodyfile="/home/work/apollo-fork/apollo/cyber/common/time_conversion.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceapollo_1_1cyber_1_1common_1a06841a03cb5e9b8ea5e98d62eb91410a" prot="public" static="no" mutable="no">
        <type>constexpr int32_t</type>
        <definition>constexpr int32_t apollo::cyber::common::UNIX_GPS_DIFF</definition>
        <argsstring></argsstring>
        <name>UNIX_GPS_DIFF</name>
        <initializer>= 315964800</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/time_conversion.h" line="58" column="1" bodyfile="/home/work/apollo-fork/apollo/cyber/common/time_conversion.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceapollo_1_1cyber_1_1common_1a3e61850fe7f6e4161edd0407d2905b1e" prot="public" static="no" mutable="no">
        <type>constexpr int64_t</type>
        <definition>constexpr int64_t apollo::cyber::common::ONE_MILLION</definition>
        <argsstring></argsstring>
        <name>ONE_MILLION</name>
        <initializer>= 1000000L</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/time_conversion.h" line="60" column="1" bodyfile="/home/work/apollo-fork/apollo/cyber/common/time_conversion.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceapollo_1_1cyber_1_1common_1a907a999b5e563a182644d11496beb6fe" prot="public" static="no" mutable="no">
        <type>constexpr int64_t</type>
        <definition>constexpr int64_t apollo::cyber::common::ONE_BILLION</definition>
        <argsstring></argsstring>
        <name>ONE_BILLION</name>
        <initializer>= 1000000000L</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/time_conversion.h" line="62" column="1" bodyfile="/home/work/apollo-fork/apollo/cyber/common/time_conversion.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1ac11a48ee837182876019fa8bd82138bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string apollo::cyber::common::GetEnv</definition>
        <argsstring>(const std::string &amp;var_name)</argsstring>
        <name>GetEnv</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>var_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/environment.h" line="29" column="1" bodyfile="/home/work/apollo-fork/apollo/cyber/common/environment.h" bodystart="29" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1ab1eeabd2bf7cd7ef2f34792af34196dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string apollo::cyber::common::WorkRoot</definition>
        <argsstring>()</argsstring>
        <name>WorkRoot</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/environment.h" line="39" column="1" bodyfile="/home/work/apollo-fork/apollo/cyber/common/environment.h" bodystart="39" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1a88247de6540a5a213e6f78f62ce60872" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool apollo::cyber::common::SetProtoToASCIIFile</definition>
        <argsstring>(const google::protobuf::Message &amp;message, int file_descriptor)</argsstring>
        <name>SetProtoToASCIIFile</name>
        <param>
          <type>const google::protobuf::Message &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>file_descriptor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/file.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1a0eb160d53ebe7c2f6b215f95081fb0ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool apollo::cyber::common::SetProtoToASCIIFile</definition>
        <argsstring>(const google::protobuf::Message &amp;message, const std::string &amp;file_name)</argsstring>
        <name>SetProtoToASCIIFile</name>
        <param>
          <type>const google::protobuf::Message &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file_name</declname>
        </param>
        <briefdescription>
<para>Sets the content of the file specified by the file_name to be the ascii representation of the input protobuf. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The proto to output to the specified file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the target file to set the content. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the action is successful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/file.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1a1d5f4e053ba687197ebdaf4eb7cf8aa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool apollo::cyber::common::GetProtoFromASCIIFile</definition>
        <argsstring>(const std::string &amp;file_name, google::protobuf::Message *message)</argsstring>
        <name>GetProtoFromASCIIFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type>google::protobuf::Message *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Parses the content of the file specified by the file_name as ascii representation of protobufs, and merges the parsed content to the proto. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the file to parse whose content. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The proto to carry the parsed content in the specified file. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the action is successful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/file.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1a70ff11d21d9657f5d4b8be612cac79f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool apollo::cyber::common::SetProtoToBinaryFile</definition>
        <argsstring>(const google::protobuf::Message &amp;message, const std::string &amp;file_name)</argsstring>
        <name>SetProtoToBinaryFile</name>
        <param>
          <type>const google::protobuf::Message &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file_name</declname>
        </param>
        <briefdescription>
<para>Sets the content of the file specified by the file_name to be the binary representation of the input protobuf. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The proto to output to the specified file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the target file to set the content. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the action is successful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/file.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1ac40b1321abdcb5bee04ecc5a1754996e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool apollo::cyber::common::GetProtoFromBinaryFile</definition>
        <argsstring>(const std::string &amp;file_name, google::protobuf::Message *message)</argsstring>
        <name>GetProtoFromBinaryFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type>google::protobuf::Message *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Parses the content of the file specified by the file_name as binary representation of protobufs, and merges the parsed content to the proto. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the file to parse whose content. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The proto to carry the parsed content in the specified file. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the action is successful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/file.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1a26b275efbad46e735071e540445b19a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool apollo::cyber::common::GetProtoFromFile</definition>
        <argsstring>(const std::string &amp;file_name, google::protobuf::Message *message)</argsstring>
        <name>GetProtoFromFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type>google::protobuf::Message *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Parses the content of the file specified by the file_name as a representation of protobufs, and merges the parsed content to the proto. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the file to parse whose content. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The proto to carry the parsed content in the specified file. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the action is successful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/file.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1acd43c697ce645990ee9373683f10b1bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool apollo::cyber::common::GetContent</definition>
        <argsstring>(const std::string &amp;file_name, std::string *content)</argsstring>
        <name>GetContent</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>content</declname>
        </param>
        <briefdescription>
<para>Get file content as string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the file to read content. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>The file content. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the action is successful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/file.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1a8948fca1037f8256c7c62ac2dbc378c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string apollo::cyber::common::GetAbsolutePath</definition>
        <argsstring>(const std::string &amp;prefix, const std::string &amp;relative_path)</argsstring>
        <name>GetAbsolutePath</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>relative_path</declname>
        </param>
        <briefdescription>
<para>Get absolute path by concatenating prefix and relative_path. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The absolute path. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/file.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1a2461aa999fa88dc32c4ef41a9fae95ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool apollo::cyber::common::PathExists</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>PathExists</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Check if the path exists. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>a file name, such as /a/b/c.txt </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the path exists. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/file.h" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1ac3aa31e012b08343b8d71f7c1d68ee79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool apollo::cyber::common::DirectoryExists</definition>
        <argsstring>(const std::string &amp;directory_path)</argsstring>
        <name>DirectoryExists</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>directory_path</declname>
        </param>
        <briefdescription>
<para>Check if the directory specified by directory_path exists and is indeed a directory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>directory_path</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory path. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the directory specified by directory_path exists and is indeed a directory. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/file.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1a9641469fee4f575ee274054d5f3efd73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; apollo::cyber::common::Glob</definition>
        <argsstring>(const std::string &amp;pattern)</argsstring>
        <name>Glob</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pattern</declname>
        </param>
        <briefdescription>
<para>Expand path pattern to matched pathes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>Path pattern, which may contain wildcards [?*]. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matched path list. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/file.h" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1a222bd281a29c75f00ed9e66a986ed674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool apollo::cyber::common::CopyFile</definition>
        <argsstring>(const std::string &amp;from, const std::string &amp;to)</argsstring>
        <name>CopyFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
<para>Copy a file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>The file path to copy from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>The file path to copy to. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the action is successful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/file.h" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1a327d27353ef7e5d2f50c809c3b05648c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool apollo::cyber::common::CopyDir</definition>
        <argsstring>(const std::string &amp;from, const std::string &amp;to)</argsstring>
        <name>CopyDir</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
<para>Copy a directory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to copy from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to copy to. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the action is successful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/file.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1a6eb038dc356389e7f1d1e6ab4932c4f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool apollo::cyber::common::Copy</definition>
        <argsstring>(const std::string &amp;from, const std::string &amp;to)</argsstring>
        <name>Copy</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
<para>Copy a file or directory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to copy from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to copy to. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the action is successful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/file.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1ada31727aa6860a122a2f6876e84ae950" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool apollo::cyber::common::EnsureDirectory</definition>
        <argsstring>(const std::string &amp;directory_path)</argsstring>
        <name>EnsureDirectory</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>directory_path</declname>
        </param>
        <briefdescription>
<para>Check if a specified directory specified by directory_path exists. If not, recursively create the directory (and its parents). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>directory_path</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory path. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the directory does exist or its creation is successful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/file.h" line="170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1aa18872a33740ca001df7cf11bdf1d891" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool apollo::cyber::common::RemoveAllFiles</definition>
        <argsstring>(const std::string &amp;directory_path)</argsstring>
        <name>RemoveAllFiles</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>directory_path</declname>
        </param>
        <briefdescription>
<para>Remove all the files under a specified directory. Note that sub-directories are NOT affected. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>directory_path</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory path. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the action is successful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/file.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1a785184e21861f27284d8531610b550ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; apollo::cyber::common::ListSubPaths</definition>
        <argsstring>(const std::string &amp;directory_path, const unsigned char d_type=DT_DIR)</argsstring>
        <name>ListSubPaths</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>directory_path</declname>
        </param>
        <param>
          <type>const unsigned char</type>
          <declname>d_type</declname>
          <defval>DT_DIR</defval>
        </param>
        <briefdescription>
<para>List sub-paths. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>directory_path</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory path. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub-path type, DT_DIR for directory, or DT_REG for file. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector of sub-paths, without the directory_path prefix. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/file.h" line="186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1abf75455f4ea35d3113ed616ccec49974" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string apollo::cyber::common::GetFileName</definition>
        <argsstring>(const std::string &amp;path, const bool remove_extension=false)</argsstring>
        <name>GetFileName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>remove_extension</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/file.h" line="189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1a3c4f6eae973c96a359e8620a45943a13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string apollo::cyber::common::GetCurrentPath</definition>
        <argsstring>()</argsstring>
        <name>GetCurrentPath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/file.h" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1aae9936d10af030dfdfb551c342688b99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T apollo::cyber::common::UnixToGpsSeconds</definition>
        <argsstring>(T unix_seconds)</argsstring>
        <name>UnixToGpsSeconds</name>
        <param>
          <type>T</type>
          <declname>unix_seconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/time_conversion.h" line="65" column="1" bodyfile="/home/work/apollo-fork/apollo/cyber/common/time_conversion.h" bodystart="65" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1ac5b4d836080b5baad92dea31f5f4b3af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t apollo::cyber::common::UnixToGpsMicroseconds</definition>
        <argsstring>(int64_t unix_microseconds)</argsstring>
        <name>UnixToGpsMicroseconds</name>
        <param>
          <type>int64_t</type>
          <declname>unix_microseconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/time_conversion.h" line="74" column="1" bodyfile="/home/work/apollo-fork/apollo/cyber/common/time_conversion.h" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1a4e68216c17c0ec2340ea6cf2ee06c4a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t apollo::cyber::common::UnixToGpsNanoseconds</definition>
        <argsstring>(int64_t unix_nanoseconds)</argsstring>
        <name>UnixToGpsNanoseconds</name>
        <param>
          <type>int64_t</type>
          <declname>unix_nanoseconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/time_conversion.h" line="79" column="1" bodyfile="/home/work/apollo-fork/apollo/cyber/common/time_conversion.h" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1ad41923eb52c1c917c93e36a7daf0e3ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T apollo::cyber::common::GpsToUnixSeconds</definition>
        <argsstring>(T gps_seconds)</argsstring>
        <name>GpsToUnixSeconds</name>
        <param>
          <type>T</type>
          <declname>gps_seconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/time_conversion.h" line="85" column="1" bodyfile="/home/work/apollo-fork/apollo/cyber/common/time_conversion.h" bodystart="85" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1a4f505d81ccc49b22947c435e8b7ca8d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t apollo::cyber::common::GpsToUnixMicroseconds</definition>
        <argsstring>(int64_t gps_microseconds)</argsstring>
        <name>GpsToUnixMicroseconds</name>
        <param>
          <type>int64_t</type>
          <declname>gps_microseconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/time_conversion.h" line="95" column="1" bodyfile="/home/work/apollo-fork/apollo/cyber/common/time_conversion.h" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1a2c8e6b4200784b7d24fdde19f6061f53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t apollo::cyber::common::GpsToUnixNanoseconds</definition>
        <argsstring>(int64_t gps_nanoseconds)</argsstring>
        <name>GpsToUnixNanoseconds</name>
        <param>
          <type>int64_t</type>
          <declname>gps_nanoseconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/time_conversion.h" line="100" column="1" bodyfile="/home/work/apollo-fork/apollo/cyber/common/time_conversion.h" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1aff2ca6b1b682c4cba3a03f6f54808dd0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t apollo::cyber::common::GpsToUnixMicroseconds</definition>
        <argsstring>(uint64_t gps_microseconds)</argsstring>
        <name>GpsToUnixMicroseconds</name>
        <param>
          <type>uint64_t</type>
          <declname>gps_microseconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/time_conversion.h" line="105" column="1" bodyfile="/home/work/apollo-fork/apollo/cyber/common/time_conversion.h" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1af4740302b111b7839dd864274ea8624d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t apollo::cyber::common::GpsToUnixNanoseconds</definition>
        <argsstring>(uint64_t gps_nanoseconds)</argsstring>
        <name>GpsToUnixNanoseconds</name>
        <param>
          <type>uint64_t</type>
          <declname>gps_nanoseconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/time_conversion.h" line="110" column="1" bodyfile="/home/work/apollo-fork/apollo/cyber/common/time_conversion.h" bodystart="110" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1ab24dac790adc76ec3b14042dd5acf9f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t apollo::cyber::common::StringToUnixSeconds</definition>
        <argsstring>(const std::string &amp;time_str, const std::string &amp;format_str=&quot;%Y-%m-%d %H:%M:%S&quot;)</argsstring>
        <name>StringToUnixSeconds</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>time_str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>format_str</declname>
          <defval>&quot;%Y-%m-%d %H:%M:%S&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/time_conversion.h" line="115" column="1" bodyfile="/home/work/apollo-fork/apollo/cyber/common/time_conversion.h" bodystart="115" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1a090af70bab8d5e3c722443f39841e2da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string apollo::cyber::common::UnixSecondsToString</definition>
        <argsstring>(uint64_t unix_seconds, const std::string &amp;format_str=&quot;%Y-%m-%d %H:%M:%S&quot;)</argsstring>
        <name>UnixSecondsToString</name>
        <param>
          <type>uint64_t</type>
          <declname>unix_seconds</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>format_str</declname>
          <defval>&quot;%Y-%m-%d %H:%M:%S&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/time_conversion.h" line="125" column="1" bodyfile="/home/work/apollo-fork/apollo/cyber/common/time_conversion.h" bodystart="125" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="namespaceapollo_1_1cyber_1_1common_1a704695bad5b604167a9921e7fe9e65f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t apollo::cyber::common::Hash</definition>
        <argsstring>(const std::string &amp;key)</argsstring>
        <name>Hash</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/apollo-fork/apollo/cyber/common/util.h" line="26" column="1" bodyfile="/home/work/apollo-fork/apollo/cyber/common/util.h" bodystart="26" bodyend="28"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/work/apollo-fork/apollo/cyber/common/environment.h" line="27" column="1"/>
  </compounddef>
</doxygen>
