<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="async__logger_8h" kind="file">
    <compoundname>async_logger.h</compoundname>
    <includes local="no">atomic</includes>
    <includes local="no">condition_variable</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">ctime</includes>
    <includes local="no">iostream</includes>
    <includes local="no">memory</includes>
    <includes local="no">mutex</includes>
    <includes local="no">string</includes>
    <includes local="no">thread</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes refid="common_2macros_8h" local="yes">cyber/common/macros.h</includes>
    <includes local="yes">glog/logging.h</includes>
    <incdepgraph>
      <node id="4364">
        <label>atomic</label>
      </node>
      <node id="4380">
        <label>glog/logging.h</label>
      </node>
      <node id="4366">
        <label>cstdint</label>
      </node>
      <node id="4375">
        <label>cyber/common/macros.h</label>
        <link refid="common_2macros_8h"/>
        <childnode refid="4368" relation="include">
        </childnode>
        <childnode refid="4369" relation="include">
        </childnode>
        <childnode refid="4370" relation="include">
        </childnode>
        <childnode refid="4376" relation="include">
        </childnode>
        <childnode refid="4373" relation="include">
        </childnode>
        <childnode refid="4377" relation="include">
        </childnode>
      </node>
      <node id="4371">
        <label>string</label>
      </node>
      <node id="4363">
        <label>logger/async_logger.h</label>
        <link refid="async_logger.h"/>
        <childnode refid="4364" relation="include">
        </childnode>
        <childnode refid="4365" relation="include">
        </childnode>
        <childnode refid="4366" relation="include">
        </childnode>
        <childnode refid="4367" relation="include">
        </childnode>
        <childnode refid="4368" relation="include">
        </childnode>
        <childnode refid="4369" relation="include">
        </childnode>
        <childnode refid="4370" relation="include">
        </childnode>
        <childnode refid="4371" relation="include">
        </childnode>
        <childnode refid="4372" relation="include">
        </childnode>
        <childnode refid="4373" relation="include">
        </childnode>
        <childnode refid="4374" relation="include">
        </childnode>
        <childnode refid="4375" relation="include">
        </childnode>
        <childnode refid="4380" relation="include">
        </childnode>
      </node>
      <node id="4365">
        <label>condition_variable</label>
      </node>
      <node id="4367">
        <label>ctime</label>
      </node>
      <node id="4374">
        <label>vector</label>
      </node>
      <node id="4379">
        <label>new</label>
      </node>
      <node id="4373">
        <label>utility</label>
      </node>
      <node id="4378">
        <label>cstdlib</label>
      </node>
      <node id="4368">
        <label>iostream</label>
      </node>
      <node id="4370">
        <label>mutex</label>
      </node>
      <node id="4372">
        <label>thread</label>
      </node>
      <node id="4376">
        <label>type_traits</label>
      </node>
      <node id="4377">
        <label>cyber/base/macros.h</label>
        <link refid="base_2macros_8h"/>
        <childnode refid="4378" relation="include">
        </childnode>
        <childnode refid="4379" relation="include">
        </childnode>
      </node>
      <node id="4369">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger" prot="public">apollo::cyber::logger::AsyncLogger</innerclass>
    <innerclass refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Msg" prot="private">apollo::cyber::logger::AsyncLogger::Msg</innerclass>
    <innerclass refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Buffer" prot="private">apollo::cyber::logger::AsyncLogger::Buffer</innerclass>
    <innernamespace refid="namespaceapollo">apollo</innernamespace>
    <innernamespace refid="namespaceapollo_1_1cyber">apollo::cyber</innernamespace>
    <innernamespace refid="namespaceapollo_1_1cyber_1_1logger">apollo::cyber::logger</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2018<sp/>The<sp/>Apollo<sp/>Authors.<sp/>All<sp/>Rights<sp/>Reserved.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>INCLUDE_CYBER_COMMON_ASYNC_LOGGER_H_</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>INCLUDE_CYBER_COMMON_ASYNC_LOGGER_H_</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;condition_variable&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctime&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mutex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common_2macros_8h" kindref="compound">cyber/common/macros.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;glog/logging.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">apollo<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">cyber<sp/>{</highlight></codeline>
<codeline lineno="37" refid="namespaceapollo_1_1cyber_1_1logger" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">logger<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Wrapper<sp/>for<sp/>a<sp/>glog<sp/>Logger<sp/>which<sp/>asynchronously<sp/>writes<sp/>log<sp/>messages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>starts<sp/>a<sp/>new<sp/>thread<sp/>responsible<sp/>for<sp/>forwarding<sp/>the<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>logger,<sp/>and<sp/>performs<sp/>double<sp/>buffering.<sp/>Writers<sp/>append<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>current<sp/>buffer<sp/>and<sp/>then<sp/>wake<sp/>up<sp/>the<sp/>logger<sp/>thread.<sp/>The<sp/>logger<sp/>swaps<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>new<sp/>buffer<sp/>and<sp/>writes<sp/>any<sp/>accumulated<sp/>messages<sp/>to<sp/>the<sp/>wrapped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Logger.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>double-buffering<sp/>design<sp/>dramatically<sp/>improves<sp/>performance,<sp/>especially</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>logging<sp/>messages<sp/>which<sp/>require<sp/>flushing<sp/>the<sp/>underlying<sp/>file<sp/>(i.e<sp/>WARNING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>above<sp/>for<sp/>default).<sp/>The<sp/>flush<sp/>can<sp/>take<sp/>a<sp/>couple<sp/>of<sp/>milliseconds,<sp/>and<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>some<sp/>cases<sp/>can<sp/>even<sp/>block<sp/>for<sp/>hundreds<sp/>of<sp/>milliseconds<sp/>or<sp/>more.<sp/>With<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>double-buffered<sp/>approach,<sp/>threads<sp/>can<sp/>proceed<sp/>with<sp/>useful<sp/>work<sp/>while<sp/>the<sp/>IO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>thread<sp/>blocks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>semantics<sp/>provided<sp/>by<sp/>this<sp/>wrapper<sp/>are<sp/>slightly<sp/>weaker<sp/>than<sp/>the<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>glog<sp/>semantics.<sp/>By<sp/>default,<sp/>glog<sp/>will<sp/>immediately<sp/>(synchronously)<sp/>flush</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WARNING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>above<sp/>to<sp/>the<sp/>underlying<sp/>file,<sp/>whereas<sp/>here<sp/>we<sp/>are<sp/>deferring<sp/>that<sp/>flush<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>separate<sp/>thread.<sp/>This<sp/>means<sp/>that<sp/>a<sp/>crash<sp/>just<sp/>after<sp/>a<sp/>&apos;LOG_WARN&apos;<sp/>would</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>may<sp/>be<sp/>missing<sp/>the<sp/>message<sp/>in<sp/>the<sp/>logs,<sp/>but<sp/>the<sp/>perf<sp/>benefit<sp/>is<sp/>probably</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>worth<sp/>it.<sp/>We<sp/>do<sp/>take<sp/>care<sp/>that<sp/>a<sp/>glog<sp/>FATAL<sp/>message<sp/>flushes<sp/>all<sp/>buffered<sp/>log</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>messages<sp/>before<sp/>exiting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NOTE:<sp/>the<sp/>logger<sp/>limits<sp/>the<sp/>total<sp/>amount<sp/>of<sp/>buffer<sp/>space,<sp/>so<sp/>if<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>underlying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>log<sp/>blocks<sp/>for<sp/>too<sp/>long,<sp/>eventually<sp/>the<sp/>threads<sp/>generating<sp/>the<sp/>log<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>block<sp/>as<sp/>well.<sp/>This<sp/>prevents<sp/>runaway<sp/>memory<sp/>usage.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger" kindref="compound">AsyncLogger</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>google::base::Logger<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1ab512ca5b0980840bd97187b8b8bf68a7" kindref="member">AsyncLogger</ref>(google::base::Logger*<sp/>wrapped,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_buffer_bytes);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1ab81c56987b35eac2468293214cc0831a" kindref="member">~AsyncLogger</ref>();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1a57a56cd44d68c932c229638169a8ece1" kindref="member">Start</ref>();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Stop<sp/>the<sp/>thread.<sp/>Flush()<sp/>and<sp/>Write()<sp/>must<sp/>not<sp/>be<sp/>called<sp/>after<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>this<sp/>is<sp/>currently<sp/>only<sp/>used<sp/>in<sp/>tests:<sp/>in<sp/>real<sp/>life,<sp/>we<sp/>enable<sp/>async</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>logging<sp/>once<sp/>when<sp/>the<sp/>program<sp/>starts<sp/>and<sp/>then<sp/>never<sp/>disable<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>REQUIRES:<sp/>Start()<sp/>must<sp/>have<sp/>been<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1a36aceb58b08edfba1417d18d60996811" kindref="member">Stop</ref>();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>a<sp/>message<sp/>to<sp/>the<sp/>log.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;force_flush&apos;<sp/>is<sp/>set<sp/>by<sp/>the<sp/>GLog<sp/>library<sp/>based<sp/>on<sp/>the<sp/>configured</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;--logbuflevel&apos;<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Any<sp/>messages<sp/>logged<sp/>at<sp/>the<sp/>configured<sp/>level<sp/>or<sp/>higher<sp/>result<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;force_flush&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>being<sp/>set<sp/>to<sp/>true,<sp/>indicating<sp/>that<sp/>the<sp/>message<sp/>should<sp/>be<sp/>immediately</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>written<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>log<sp/>rather<sp/>than<sp/>buffered<sp/>in<sp/>memory.<sp/>See<sp/>the<sp/>class-level<sp/>docs<sp/>above<sp/>for<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>details<sp/>about<sp/>the<sp/>implementation<sp/>provided<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>REQUIRES:<sp/>Start()<sp/>must<sp/>have<sp/>been<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1abe281a699f379c7274ef0fc9fe171eab" kindref="member">Write</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>force_flush,<sp/>time_t<sp/>timestamp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>message_len)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Flush<sp/>any<sp/>buffered<sp/>messages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1a75894f5de117c03d05c013f2638639a1" kindref="member">Flush</ref>()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>current<sp/>LOG<sp/>file<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>return<sp/>value<sp/>is<sp/>an<sp/>approximate<sp/>value<sp/>since<sp/>some</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>logged<sp/>data<sp/>may<sp/>not<sp/>have<sp/>been<sp/>flushed<sp/>to<sp/>disk<sp/>yet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1af14fc46b26821895b40def530a4a5aeb" kindref="member">LogSize</ref>()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1ac71b6d358d78e0912524c1b8359baa2f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::thread*<sp/><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1ac71b6d358d78e0912524c1b8359baa2f" kindref="member">LogThread</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;<ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1a973fb1d166acaab52815ded79cadec25" kindref="member">thread_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>buffered<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(todd):<sp/>using<sp/>std::string<sp/>for<sp/>buffered<sp/>messages<sp/>is<sp/>convenient<sp/>but<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>efficient<sp/>as<sp/>it<sp/>could<sp/>be.<sp/>It&apos;s<sp/>better<sp/>to<sp/>make<sp/>the<sp/>buffers<sp/>just<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Arenas<sp/>and<sp/>allocate<sp/>both<sp/>the<sp/>message<sp/>data<sp/>and<sp/>Msg<sp/>struct<sp/>from<sp/>them,<sp/>forming</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>linked<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Msg" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Msg" kindref="compound">Msg</ref><sp/>{</highlight></codeline>
<codeline lineno="115" refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Msg_1a35ff514a7adda9483a8ace83ef3d88e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>time_t<sp/><ref refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Msg_1a35ff514a7adda9483a8ace83ef3d88e6" kindref="member">ts</ref>;</highlight></codeline>
<codeline lineno="116" refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Msg_1a69f346007aaf17c8cc69297fecffb5f7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Msg_1a69f346007aaf17c8cc69297fecffb5f7" kindref="member">message</ref>;</highlight></codeline>
<codeline lineno="117" refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Msg_1a4118d2f0f6a96024b5c95eb73f743c15" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/><ref refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Msg_1a4118d2f0f6a96024b5c95eb73f743c15" kindref="member">level</ref>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Msg_1a63f56c31542f0ef19da78e550a238a9b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Msg_1a63f56c31542f0ef19da78e550a238a9b" kindref="member">Msg</ref>(time_t<sp/><ref refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Msg_1a35ff514a7adda9483a8ace83ef3d88e6" kindref="member">ts</ref>,<sp/>std::string&amp;&amp;<sp/>message,<sp/>int32_t<sp/><ref refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Msg_1a4118d2f0f6a96024b5c95eb73f743c15" kindref="member">level</ref>)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>ts(ts),<sp/>message(std::move(message)),<sp/>level(level)<sp/>{}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>buffer<sp/>of<sp/>messages<sp/>waiting<sp/>to<sp/>be<sp/>flushed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Buffer" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Buffer" kindref="compound">Buffer</ref><sp/>{</highlight></codeline>
<codeline lineno="125" refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Buffer_1a8b95c833f3fccbe32a8b1dd9a814c018" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Msg&gt;<sp/><ref refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Buffer_1a8b95c833f3fccbe32a8b1dd9a814c018" kindref="member">messages</ref>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Estimate<sp/>of<sp/>the<sp/>size<sp/>of<sp/>&apos;messages&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Buffer_1a48e0490978aeaa590cbe4a8697926a9a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::atomic&lt;int&gt;<sp/><ref refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Buffer_1a48e0490978aeaa590cbe4a8697926a9a" kindref="member">size</ref><sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Whether<sp/>this<sp/>buffer<sp/>needs<sp/>an<sp/>explicit<sp/>flush<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>underlying<sp/>logger.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Buffer_1a56de07f3921488c1085e807ad40fda2c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Buffer_1a56de07f3921488c1085e807ad40fda2c" kindref="member">flush</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Buffer_1ab25f705c60cb7b6a45d208dbb1fa1b40" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Buffer_1ab25f705c60cb7b6a45d208dbb1fa1b40" kindref="member">Buffer</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Buffer_1aa191b2df2565ae9b3d937a92b83fbd7e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Buffer_1aa191b2df2565ae9b3d937a92b83fbd7e" kindref="member">clear</ref>()<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Buffer_1a8b95c833f3fccbe32a8b1dd9a814c018" kindref="member">messages</ref>.clear();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Buffer_1a48e0490978aeaa590cbe4a8697926a9a" kindref="member">size</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Buffer_1a56de07f3921488c1085e807ad40fda2c" kindref="member">flush</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Buffer_1ae00006eb63bc2e3248c8029c65adabee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Buffer_1ae00006eb63bc2e3248c8029c65adabee" kindref="member">add</ref>(<ref refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Msg" kindref="compound">Msg</ref>&amp;&amp;<sp/>msg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>force_flush)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Buffer_1a48e0490978aeaa590cbe4a8697926a9a" kindref="member">size</ref><sp/>+=</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(msg))<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(msg.message.size());</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Buffer_1a8b95c833f3fccbe32a8b1dd9a814c018" kindref="member">messages</ref>.emplace_back(std::move(msg));</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Buffer_1a56de07f3921488c1085e807ad40fda2c" kindref="member">flush</ref><sp/>|=<sp/>force_flush;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Buffer_1aa8102cd3065cf8a45bcbeae371ecae9e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Buffer_1aa8102cd3065cf8a45bcbeae371ecae9e" kindref="member">needs_flush_or_write</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Buffer_1a56de07f3921488c1085e807ad40fda2c" kindref="member">flush</ref><sp/>||<sp/>!<ref refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Buffer_1a8b95c833f3fccbe32a8b1dd9a814c018" kindref="member">messages</ref>.empty();</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Buffer_1a9fb640a7e65ad95e95df262b521b4b82" kindref="member">DISALLOW_COPY_AND_ASSIGN</ref>(<ref refid="structapollo_1_1cyber_1_1logger_1_1AsyncLogger_1_1Buffer" kindref="compound">Buffer</ref>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1a52f8a409bf0dceb86e9e484a494a166c" kindref="member">BufferFull</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Buffer&amp;<sp/>buf)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1af1600cd1348d78c6ab0e806928a2d50b" kindref="member">RunThread</ref>();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>number<sp/>of<sp/>bytes<sp/>used<sp/>by<sp/>the<sp/>entire<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1aa335015aac6cf1e4a7ef9def98cc5f33" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1aa335015aac6cf1e4a7ef9def98cc5f33" kindref="member">max_buffer_bytes_</ref>;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1a4d7679337ba167a45f75c006f9c2f340" refkind="member"><highlight class="normal"><sp/><sp/>google::base::Logger*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1a4d7679337ba167a45f75c006f9c2f340" kindref="member">wrapped_</ref>;</highlight></codeline>
<codeline lineno="164" refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1a973fb1d166acaab52815ded79cadec25" refkind="member"><highlight class="normal"><sp/><sp/>std::thread<sp/><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1a973fb1d166acaab52815ded79cadec25" kindref="member">thread_</ref>;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Count<sp/>of<sp/>how<sp/>many<sp/>times<sp/>the<sp/>writer<sp/>thread<sp/>has<sp/>flushed<sp/>the<sp/>buffers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>64<sp/>bits<sp/>should<sp/>be<sp/>enough<sp/>to<sp/>never<sp/>worry<sp/>about<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1a52a5941a5ed779bac9b1469677dfd8fa" refkind="member"><highlight class="normal"><sp/><sp/>uint64_t<sp/><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1a52a5941a5ed779bac9b1469677dfd8fa" kindref="member">flush_count_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Count<sp/>of<sp/>how<sp/>many<sp/>times<sp/>the<sp/>writer<sp/>thread<sp/>has<sp/>dropped<sp/>the<sp/>log<sp/>messages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>64<sp/>bits<sp/>should<sp/>be<sp/>enough<sp/>to<sp/>never<sp/>worry<sp/>about<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1ae50ea372dfdfe32615dc5d25664c8075" refkind="member"><highlight class="normal"><sp/><sp/>uint64_t<sp/><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1ae50ea372dfdfe32615dc5d25664c8075" kindref="member">drop_count_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Protects<sp/>buffers<sp/>as<sp/>well<sp/>as<sp/>&apos;state_&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1a822d34060bc2e4bc3c1b5dbb80a62470" refkind="member"><highlight class="normal"><sp/><sp/>std::mutex<sp/><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1a822d34060bc2e4bc3c1b5dbb80a62470" kindref="member">mutex_</ref>;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Signaled<sp/>by<sp/>app<sp/>threads<sp/>to<sp/>wake<sp/>up<sp/>the<sp/>flusher,<sp/>either<sp/>for<sp/>new</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>data<sp/>or<sp/>because<sp/>&apos;state_&apos;<sp/>changed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1a606516963229bb28e70cf5599e993798" refkind="member"><highlight class="normal"><sp/><sp/>std::condition_variable<sp/><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1a606516963229bb28e70cf5599e993798" kindref="member">wake_flusher_cv_</ref>;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Signaled<sp/>by<sp/>the<sp/>flusher<sp/>thread<sp/>when<sp/>the<sp/>flusher<sp/>has<sp/>swapped<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>free<sp/>buffer<sp/>to<sp/>write<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::condition_variable<sp/>free_buffer_cv_;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Signaled<sp/>by<sp/>the<sp/>flusher<sp/>thread<sp/>when<sp/>it<sp/>has<sp/>completed<sp/>flushing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>current<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1ac317fa7ba8ac170fcaebee103b861aa6" refkind="member"><highlight class="normal"><sp/><sp/>std::condition_variable<sp/><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1ac317fa7ba8ac170fcaebee103b861aa6" kindref="member">flush_complete_cv_</ref>;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>buffer<sp/>to<sp/>which<sp/>application<sp/>threads<sp/>append<sp/>new<sp/>log<sp/>messages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1a89a6be9354f86ddcfabe1d313117b43d" refkind="member"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;Buffer&gt;<sp/><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1a89a6be9354f86ddcfabe1d313117b43d" kindref="member">active_buf_</ref>;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>buffer<sp/>currently<sp/>being<sp/>flushed<sp/>by<sp/>the<sp/>logger<sp/>thread,<sp/>cleared</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>after<sp/>a<sp/>successful<sp/>flush.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1ae78d3263cf93ea38811ab00e2afc6d1c" refkind="member"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;Buffer&gt;<sp/><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1ae78d3263cf93ea38811ab00e2afc6d1c" kindref="member">flushing_buf_</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Trigger<sp/>for<sp/>the<sp/>logger<sp/>thread<sp/>to<sp/>stop.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1ac693c5c55875861feb508ed2b60223a4a26a879c1a0c30577cff7af5688a3b55f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1ac693c5c55875861feb508ed2b60223a4" kindref="member">State</ref><sp/>{<sp/><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1ac693c5c55875861feb508ed2b60223a4a05e01a42de2ef2f76fc008c2f2ac0b11" kindref="member">INITTED</ref>,<sp/><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1ac693c5c55875861feb508ed2b60223a4ad883b067d35376bd78b0f301a0200704" kindref="member">RUNNING</ref>,<sp/><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1ac693c5c55875861feb508ed2b60223a4a26a879c1a0c30577cff7af5688a3b55f" kindref="member">STOPPED</ref><sp/>};</highlight></codeline>
<codeline lineno="198" refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1a01dbb42c36800aa824b929ddba8332d8" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1ac693c5c55875861feb508ed2b60223a4" kindref="member">State</ref><sp/><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1a01dbb42c36800aa824b929ddba8332d8" kindref="member">state_</ref><sp/>=<sp/><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1ac693c5c55875861feb508ed2b60223a4a05e01a42de2ef2f76fc008c2f2ac0b11" kindref="member">INITTED</ref>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger_1afa782e83a5e5d08d7ff7da08c6f194ac" kindref="member">DISALLOW_COPY_AND_ASSIGN</ref>(<ref refid="classapollo_1_1cyber_1_1logger_1_1AsyncLogger" kindref="compound">AsyncLogger</ref>);</highlight></codeline>
<codeline lineno="201"><highlight class="normal">};</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>logger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>cyber</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>apollo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>CYBER_COMMON_ASYNC_LOGGER_H_</highlight></codeline>
    </programlisting>
    <location file="/home/work/apollo-fork/apollo/cyber/logger/async_logger.h"/>
  </compounddef>
</doxygen>
